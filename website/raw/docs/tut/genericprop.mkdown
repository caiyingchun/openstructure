title: Storing Custom Data in an Entity

[TOC]

# Storing Custom Data in an Entity
This tutorial will guide you through the use of GenericProperties to store any custom data inside an Entity.

## Introduction
It is often very convenient to store any arbitrary data inside an Entity. A few examples are: 

  * calculated properties of atoms
  * sequence conservation of a residue
  * interaction energy of a substructure with its surrounding
  * fit of a fragment inside an electron density map

In OpenStructure this is supported by the use of GenericProperties. Most building blocks are a dox[ost::GenericPropertyContainer|GenericPropertyContainer], meaning that arbitrary key-value pairs can be stored in them, namely:

  * EntityHandle and EntityView
  * ChainHandle and ChainView
  * ResidueHandle and ResidueView
  * AtomHandle and AtomView
  * BondHandle

The view variants will reflect the generic properties of the handle variants.

A generic property key is always a String, and a value can be one of String, Real, int or bool. For each of these data types, methods to retrieve and store values are available both in Python and C++.

## Storing and Accessing Data

All OpenStructure building blocks that are GenericPropertyContainers, have four different methods to store generic data, depending on the data type (i.e. String, Float, Int or Bool).

To store a float value with the key 'myfloatprop' in all atoms of an entity:

    ::::python
    import math
    for atom in entity.GetAtomList(): 
      val=5*math.sin(0.4*atom.GetPos().GetX())
      atom.SetGenericFloatProperty("myfloatprop", val)

If a GenericProperty at a given level (i.e. atom, bond, residue, chain or entity) already exists, it will be overwritten. To check if it exists, use:

    ::::python
    exists=atom.HasGenericProperty("myfloatprop")
    print exists
    
To access the value of a GenericProperty, we first check if the property exists and then access it, using the method suitable for the data type of the property. For the previously set property "myfloatprop" of the data type Real, at the atom level:

    ::::python
    for atom in entity.GetAtomList(): 
      if atom.HasGenericProperty("myfloatprop"):
        print atom.GetGenericFloatProperty("myfloatprop")
        
When trying to access a property that has not been set, or one that has been set, but at a different level, an error is thrown. The same is true when trying to access a property of a different data type, e.g.:

    ::::python
    # all of the following lines will throw errors
    # error because the property does not exist 
    print atom.GetGenericFloatProperty("unknownprop")
    
    # error because the property was set at another level
    print entity.GetGenericFloatProperty("myfloatprop")
    
    # error because the data type of the property is different
    print atom.GetGenericStringProperty("myfloatprop")
    
For more details see dox[ost::GenericPropertyContainer|GenericPropertyContainer].

## Use of GenericProperties in Queries

The [query language](docs/tut/query.html) can also be used for numeric generic properties (i.e. GenericFloatProperty and GenericIntProperty), but the syntax is slightly different. To access any generic properties, it needs to be specified that they are generic and at which level they are defined. Therefore, all generic properties start with a 'g', followed by an 'a', 'r' or 'c' for atom, residue or chain level respectively. For more details [see documentation](dox/html/query.html#gen_prop). 

