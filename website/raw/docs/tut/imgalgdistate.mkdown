title: Image State Algorithms

[TOC]

# Image State Algorithms

## Overview

In order to allow fast access to the low level image state implementation, the
data algorithms are complemented by a similar concept, namely image state algorithms.

Analogous to the image state implementation, each of the different image state
algorithms is composed of a double template combination, specifying the data type
(real or complex) and the domain (spatial, frequency or half-frequency). And
analogous to the data algorithm, there are different algorithms dependent on the
purpose of the algorithm to be implemented: non-modifying, in-place modifying and
-of-place modifying.

In should be pointed out the the image state algorithms are really a hybrid
concept, as they may be used as normal data algorithms as well !

A class with a specific structure is required that is later used as a template
parameter. The exact syntax is dependent on the type of algorithm. The minimal
interface comprises two methods: a ding VisitState(), and a (possibly static)
GetAlgorithmName(). Additional methods may be added, in particular a destruct or
and/or special constructors.

## Example of ImageState algorithm

This is an example of a NonMod algorithm

    :::pp
    class MyAlgorithmFnc
    {
     public:
      MyAlgorithmFunc();
  
      // other ctors

      // entry point for image state visitor
      template<typename T, class D>
      void VisitState(const img::image_state::ImageStateImpl<T,D>& isi);

      // entry point for function visitor
      void VisitFunction(const Funcion& f);

      // name of algorithm
      static string GetAlgorithmName();

      // other methods may follow here
     };
